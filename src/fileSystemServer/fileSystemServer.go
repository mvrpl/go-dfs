// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: fsServer.proto

package fileSystemServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrincipalNo_EstaAtivo_FullMethodName              = "/PrincipalNo/estaAtivo"
	PrincipalNo_AtribuirBlocos_FullMethodName         = "/PrincipalNo/atribuirBlocos"
	PrincipalNo_ObterLocalizacoesBloco_FullMethodName = "/PrincipalNo/obterLocalizacoesBloco"
	PrincipalNo_ListaArquivos_FullMethodName          = "/PrincipalNo/listaArquivos"
	PrincipalNo_AdcNoDados_FullMethodName             = "/PrincipalNo/adcNoDados"
	PrincipalNo_AdcNovoArquivo_FullMethodName         = "/PrincipalNo/adcNovoArquivo"
)

// PrincipalNoClient is the client API for PrincipalNo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrincipalNoClient interface {
	EstaAtivo(ctx context.Context, in *RelatorioBloco, opts ...grpc.CallOption) (*Status, error)
	AtribuirBlocos(ctx context.Context, in *ArquivoMetadata, opts ...grpc.CallOption) (*MapeamentoLocalizacaoBloco, error)
	ObterLocalizacoesBloco(ctx context.Context, in *ArquivoMetadata, opts ...grpc.CallOption) (*MapeamentoLocalizacaoBloco, error)
	ListaArquivos(ctx context.Context, in *ListaArquivosParam, opts ...grpc.CallOption) (*ListaArquivos, error)
	AdcNoDados(ctx context.Context, in *DadosNoInfo, opts ...grpc.CallOption) (*Status, error)
	AdcNovoArquivo(ctx context.Context, in *Bloco, opts ...grpc.CallOption) (*Status, error)
}

type principalNoClient struct {
	cc grpc.ClientConnInterface
}

func NewPrincipalNoClient(cc grpc.ClientConnInterface) PrincipalNoClient {
	return &principalNoClient{cc}
}

func (c *principalNoClient) EstaAtivo(ctx context.Context, in *RelatorioBloco, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, PrincipalNo_EstaAtivo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalNoClient) AtribuirBlocos(ctx context.Context, in *ArquivoMetadata, opts ...grpc.CallOption) (*MapeamentoLocalizacaoBloco, error) {
	out := new(MapeamentoLocalizacaoBloco)
	err := c.cc.Invoke(ctx, PrincipalNo_AtribuirBlocos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalNoClient) ObterLocalizacoesBloco(ctx context.Context, in *ArquivoMetadata, opts ...grpc.CallOption) (*MapeamentoLocalizacaoBloco, error) {
	out := new(MapeamentoLocalizacaoBloco)
	err := c.cc.Invoke(ctx, PrincipalNo_ObterLocalizacoesBloco_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalNoClient) ListaArquivos(ctx context.Context, in *ListaArquivosParam, opts ...grpc.CallOption) (*ListaArquivos, error) {
	out := new(ListaArquivos)
	err := c.cc.Invoke(ctx, PrincipalNo_ListaArquivos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalNoClient) AdcNoDados(ctx context.Context, in *DadosNoInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, PrincipalNo_AdcNoDados_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalNoClient) AdcNovoArquivo(ctx context.Context, in *Bloco, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, PrincipalNo_AdcNovoArquivo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrincipalNoServer is the server API for PrincipalNo service.
// All implementations must embed UnimplementedPrincipalNoServer
// for forward compatibility
type PrincipalNoServer interface {
	EstaAtivo(context.Context, *RelatorioBloco) (*Status, error)
	AtribuirBlocos(context.Context, *ArquivoMetadata) (*MapeamentoLocalizacaoBloco, error)
	ObterLocalizacoesBloco(context.Context, *ArquivoMetadata) (*MapeamentoLocalizacaoBloco, error)
	ListaArquivos(context.Context, *ListaArquivosParam) (*ListaArquivos, error)
	AdcNoDados(context.Context, *DadosNoInfo) (*Status, error)
	AdcNovoArquivo(context.Context, *Bloco) (*Status, error)
	mustEmbedUnimplementedPrincipalNoServer()
}

// UnimplementedPrincipalNoServer must be embedded to have forward compatible implementations.
type UnimplementedPrincipalNoServer struct {
}

func (UnimplementedPrincipalNoServer) EstaAtivo(context.Context, *RelatorioBloco) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstaAtivo not implemented")
}
func (UnimplementedPrincipalNoServer) AtribuirBlocos(context.Context, *ArquivoMetadata) (*MapeamentoLocalizacaoBloco, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtribuirBlocos not implemented")
}
func (UnimplementedPrincipalNoServer) ObterLocalizacoesBloco(context.Context, *ArquivoMetadata) (*MapeamentoLocalizacaoBloco, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObterLocalizacoesBloco not implemented")
}
func (UnimplementedPrincipalNoServer) ListaArquivos(context.Context, *ListaArquivosParam) (*ListaArquivos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListaArquivos not implemented")
}
func (UnimplementedPrincipalNoServer) AdcNoDados(context.Context, *DadosNoInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdcNoDados not implemented")
}
func (UnimplementedPrincipalNoServer) AdcNovoArquivo(context.Context, *Bloco) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdcNovoArquivo not implemented")
}
func (UnimplementedPrincipalNoServer) mustEmbedUnimplementedPrincipalNoServer() {}

// UnsafePrincipalNoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrincipalNoServer will
// result in compilation errors.
type UnsafePrincipalNoServer interface {
	mustEmbedUnimplementedPrincipalNoServer()
}

func RegisterPrincipalNoServer(s grpc.ServiceRegistrar, srv PrincipalNoServer) {
	s.RegisterService(&PrincipalNo_ServiceDesc, srv)
}

func _PrincipalNo_EstaAtivo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelatorioBloco)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalNoServer).EstaAtivo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrincipalNo_EstaAtivo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalNoServer).EstaAtivo(ctx, req.(*RelatorioBloco))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalNo_AtribuirBlocos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArquivoMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalNoServer).AtribuirBlocos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrincipalNo_AtribuirBlocos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalNoServer).AtribuirBlocos(ctx, req.(*ArquivoMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalNo_ObterLocalizacoesBloco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArquivoMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalNoServer).ObterLocalizacoesBloco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrincipalNo_ObterLocalizacoesBloco_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalNoServer).ObterLocalizacoesBloco(ctx, req.(*ArquivoMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalNo_ListaArquivos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListaArquivosParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalNoServer).ListaArquivos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrincipalNo_ListaArquivos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalNoServer).ListaArquivos(ctx, req.(*ListaArquivosParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalNo_AdcNoDados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DadosNoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalNoServer).AdcNoDados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrincipalNo_AdcNoDados_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalNoServer).AdcNoDados(ctx, req.(*DadosNoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalNo_AdcNovoArquivo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bloco)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalNoServer).AdcNovoArquivo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrincipalNo_AdcNovoArquivo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalNoServer).AdcNovoArquivo(ctx, req.(*Bloco))
	}
	return interceptor(ctx, in, info, handler)
}

// PrincipalNo_ServiceDesc is the grpc.ServiceDesc for PrincipalNo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrincipalNo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PrincipalNo",
	HandlerType: (*PrincipalNoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "estaAtivo",
			Handler:    _PrincipalNo_EstaAtivo_Handler,
		},
		{
			MethodName: "atribuirBlocos",
			Handler:    _PrincipalNo_AtribuirBlocos_Handler,
		},
		{
			MethodName: "obterLocalizacoesBloco",
			Handler:    _PrincipalNo_ObterLocalizacoesBloco_Handler,
		},
		{
			MethodName: "listaArquivos",
			Handler:    _PrincipalNo_ListaArquivos_Handler,
		},
		{
			MethodName: "adcNoDados",
			Handler:    _PrincipalNo_AdcNoDados_Handler,
		},
		{
			MethodName: "adcNovoArquivo",
			Handler:    _PrincipalNo_AdcNovoArquivo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fsServer.proto",
}

const (
	DadosNo_LerBloco_FullMethodName          = "/DadosNo/lerBloco"
	DadosNo_EscreverBloco_FullMethodName     = "/DadosNo/escreverBloco"
	DadosNo_ListaDataArquivos_FullMethodName = "/DadosNo/listaDataArquivos"
)

// DadosNoClient is the client API for DadosNo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DadosNoClient interface {
	LerBloco(ctx context.Context, in *BlocoMetadata, opts ...grpc.CallOption) (*Bloco, error)
	EscreverBloco(ctx context.Context, in *Bloco, opts ...grpc.CallOption) (*Status, error)
	ListaDataArquivos(ctx context.Context, in *ListaArquivosParam, opts ...grpc.CallOption) (*ListaArquivos, error)
}

type dadosNoClient struct {
	cc grpc.ClientConnInterface
}

func NewDadosNoClient(cc grpc.ClientConnInterface) DadosNoClient {
	return &dadosNoClient{cc}
}

func (c *dadosNoClient) LerBloco(ctx context.Context, in *BlocoMetadata, opts ...grpc.CallOption) (*Bloco, error) {
	out := new(Bloco)
	err := c.cc.Invoke(ctx, DadosNo_LerBloco_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dadosNoClient) EscreverBloco(ctx context.Context, in *Bloco, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, DadosNo_EscreverBloco_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dadosNoClient) ListaDataArquivos(ctx context.Context, in *ListaArquivosParam, opts ...grpc.CallOption) (*ListaArquivos, error) {
	out := new(ListaArquivos)
	err := c.cc.Invoke(ctx, DadosNo_ListaDataArquivos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DadosNoServer is the server API for DadosNo service.
// All implementations must embed UnimplementedDadosNoServer
// for forward compatibility
type DadosNoServer interface {
	LerBloco(context.Context, *BlocoMetadata) (*Bloco, error)
	EscreverBloco(context.Context, *Bloco) (*Status, error)
	ListaDataArquivos(context.Context, *ListaArquivosParam) (*ListaArquivos, error)
	mustEmbedUnimplementedDadosNoServer()
}

// UnimplementedDadosNoServer must be embedded to have forward compatible implementations.
type UnimplementedDadosNoServer struct {
}

func (UnimplementedDadosNoServer) LerBloco(context.Context, *BlocoMetadata) (*Bloco, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LerBloco not implemented")
}
func (UnimplementedDadosNoServer) EscreverBloco(context.Context, *Bloco) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscreverBloco not implemented")
}
func (UnimplementedDadosNoServer) ListaDataArquivos(context.Context, *ListaArquivosParam) (*ListaArquivos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListaDataArquivos not implemented")
}
func (UnimplementedDadosNoServer) mustEmbedUnimplementedDadosNoServer() {}

// UnsafeDadosNoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DadosNoServer will
// result in compilation errors.
type UnsafeDadosNoServer interface {
	mustEmbedUnimplementedDadosNoServer()
}

func RegisterDadosNoServer(s grpc.ServiceRegistrar, srv DadosNoServer) {
	s.RegisterService(&DadosNo_ServiceDesc, srv)
}

func _DadosNo_LerBloco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlocoMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DadosNoServer).LerBloco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DadosNo_LerBloco_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DadosNoServer).LerBloco(ctx, req.(*BlocoMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _DadosNo_EscreverBloco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bloco)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DadosNoServer).EscreverBloco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DadosNo_EscreverBloco_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DadosNoServer).EscreverBloco(ctx, req.(*Bloco))
	}
	return interceptor(ctx, in, info, handler)
}

func _DadosNo_ListaDataArquivos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListaArquivosParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DadosNoServer).ListaDataArquivos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DadosNo_ListaDataArquivos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DadosNoServer).ListaDataArquivos(ctx, req.(*ListaArquivosParam))
	}
	return interceptor(ctx, in, info, handler)
}

// DadosNo_ServiceDesc is the grpc.ServiceDesc for DadosNo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DadosNo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DadosNo",
	HandlerType: (*DadosNoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "lerBloco",
			Handler:    _DadosNo_LerBloco_Handler,
		},
		{
			MethodName: "escreverBloco",
			Handler:    _DadosNo_EscreverBloco_Handler,
		},
		{
			MethodName: "listaDataArquivos",
			Handler:    _DadosNo_ListaDataArquivos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fsServer.proto",
}
